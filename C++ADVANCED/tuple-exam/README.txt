# Tuple

В данном задании вам нужно реализовать свою версию кортежа
&mdash; [`std::tuple`](https://en.cppreference.com/w/cpp/utility/tuple).

Что нужно реализовать для `tuple<Types...>`:

* Конструктор по умолчанию &mdash; производит value-инициализацию каждого
  элемента;
* Все специальные члены класса, которые посчитаете нужными (должны сохранять
  тривиальность);
* Конструктор от `UTypes&&...` &mdash; инициализирует элементы заданными
  значениями;
* Конструктор от `const Types&...` &mdash; помогает предыдущему с выводом типов;
* `make_tuple` &mdash; создаёт `tuple`, сам выводя типы. Обратите внимание, как
  он это делает в случае с ссылками
  (см. [cppref](https://en.cppreference.com/w/cpp/utility/tuple/make_tuple));
* Обращение к элементам:
    * `get<N>` &mdash; возвращает значение по заданному индексу;
    * `get<T>` &mdash; возвращает значение по заданному типу (если он
      встречается несколько раз, должна быть ошибка компиляции);
* Операторы сравнения (`==`, `<=>`) в лексикографическом порядке &mdash;
  определены только для кортежей одинакового размера;
* Вспомогательные трейты:
    * `tuple_size<T>`, `tuple_size_v<T>` &mdash; количество элементов в
      кортеже `T`;
    * `tuple_element<N, T>`, `tuple_element_t<N, T>` &mdash; тип `N`-го элемента
      в кортеже `T`.

Пример:

```c++
tuple<int, double, int> x {42, 3.14, 1337};
get<0>(x); // ok: 42
get<2>(x); // ok: 1337
get<double>(x); // ok: 3.14
get<3>(x); // compilation error
get<char>(x); // compilation error
get<int>(x); // compilation error
```

Любые операции должно быть можно исполнить во время компиляции. Где считаете
нужными, расставьте `noexcept` и `explicit` (возможно, условные).
